// Arrow Function ========================
function toto (param) {
  return result
}
// équivalent à
const toto = (param) => result

// Map ===================================
const numbers = [1, 2, 3, 4]
const plus2 = (number) => number + 2
numbers.map(plus2)
// => [3, 4, 5, 6]

// Filter ================================
const numbers = [1, 2, 3, 4]
const isOdd = (number) => number % 2 === 0
numbers.filter(isOdd)
// => [2, 4]

// Répondre à des questions
const answers = questions
.filter((question) => isNotTroll(question))
.filter((question) => canIAnswer(question))
.map((question) => rephraseIfNeeded(question))
.map((question) => computeAnswer(question))

// Les fonctions sont des paramètres
const answers = questions
  .filter(isNotTroll)
  .filter(canIAnswer)
  .map(rephraseIfNeeded)
  .map(computeAnswer)

// /!\ Attention à la lisibilté
// On nomme chaque partie

function filterQuestions (questions) {
  return (
    questions
      .filter(isNotTroll)
      .filter(canIAnswer)
  )
}

function getAnswers (questions) {
  return (
    questions
      .map(rephraseIfNeeded)
      .map(computeAnswer)
  )
}

const valuableQuestions =
  filterQuestions(questions)

const answers =
  getAnswers(valuableQuestions)

// Et si on veut avoir la classe
const answerQuestions = flowLeft(
  filterQuestions,
  getAnswers
)

const answers = answerQuestions(questions)
